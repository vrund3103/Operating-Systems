import "string"

#pragma link("mega65hyper.ld")

const char* RASTER = 0xd012;
const char* VIC_MEMORY = 0xd018;
const char* SCREEN = 0x0400;
const char* BGCOL = 0xd021;
const char* COLS = 0xd800;
const char BLACK = 0;
const char WHITE = 1;

void main() {

*VIC_MEMORY = 0x14;

memset(SCREEN, ' ', 40*25);

memset(COLS, WHITE, 40*25);

char* sc = SCREEN+40;

char* msg = "checkpoint2.2 by josh0054";

while(*msg) {
*sc++ = *msg++;
}

while(true) {
if(*RASTER==54 || *RASTER==66) {
*BGCOL = WHITE;
} else {
*BGCOL = BLACK;
}
}
}

void syscall1() {
*(SCREEN+79) = '>';
}

void syscall2() {
*(SCREEN+78) = '<';
}


#pragma data_seg(Syscall)


struct SysCall {
char xjmp; // Holds $4C, the JMP $nnnn opcode
void()* syscall; // Holds handler address, will be the target of the JMP
char xnop; // Holds $EA, the NOP opcode
};


const char JMP = 0x4c;
const char NOP = 0xea;


export struct SysCall[] SYSCALLS = {
{JMP, &syscall1, NOP},
        {JMP, &syscall2, NOP},
        {JMP, &syscall1, NOP},
        {JMP, &syscall2, NOP},
        {JMP, &syscall1, NOP},
        {JMP, &syscall2, NOP},
        {JMP, &syscall1, NOP},
        {JMP, &syscall2, NOP},
        {JMP, &syscall1, NOP},
        {JMP, &syscall2, NOP},
        {JMP, &syscall1, NOP},
        {JMP, &syscall2, NOP},
        {JMP, &syscall1, NOP},
        {JMP, &syscall2, NOP},
        {JMP, &syscall1, NOP},
        {JMP, &syscall2, NOP},
        {JMP, &syscall1, NOP},
        {JMP, &syscall2, NOP},
        {JMP, &syscall1, NOP},
        {JMP, &syscall2, NOP},
        {JMP, &syscall1, NOP},
        {JMP, &syscall2, NOP},
        {JMP, &syscall1, NOP},
        {JMP, &syscall2, NOP},
        {JMP, &syscall1, NOP},
        {JMP, &syscall2, NOP},
        {JMP, &syscall1, NOP},
        {JMP, &syscall2, NOP},
        {JMP, &syscall1, NOP},
        {JMP, &syscall2, NOP},
        {JMP, &syscall1, NOP},
        {JMP, &syscall2, NOP},
        {JMP, &syscall1, NOP},
        {JMP, &syscall2, NOP},
        {JMP, &syscall1, NOP},
        {JMP, &syscall2, NOP},
        {JMP, &syscall1, NOP},
        {JMP, &syscall2, NOP},
        {JMP, &syscall1, NOP},
        {JMP, &syscall2, NOP},
        {JMP, &syscall1, NOP},
        {JMP, &syscall2, NOP},
        {JMP, &syscall1, NOP},
        {JMP, &syscall2, NOP},
        {JMP, &syscall1, NOP},
        {JMP, &syscall2, NOP},
        {JMP, &syscall1, NOP},
        {JMP, &syscall2, NOP},
        {JMP, &syscall1, NOP},
        {JMP, &syscall2, NOP},
        {JMP, &syscall1, NOP},
        {JMP, &syscall2, NOP},
        {JMP, &syscall1, NOP},
        {JMP, &syscall2, NOP},
        {JMP, &syscall1, NOP},
        {JMP, &syscall2, NOP},
        {JMP, &syscall1, NOP},
       {JMP, &syscall2, NOP},
       {JMP, &syscall1, NOP},
       {JMP, &syscall2, NOP},
       {JMP, &syscall1, NOP},
       {JMP, &syscall2, NOP},
       {JMP, &syscall1, NOP},
       {JMP, &syscall2, NOP}
};

export align(0x100) struct SysCall[] SYSCALL_RESET = {
{JMP,&main,NOP},
         {JMP,&main,NOP},
         {JMP,&main,NOP},
         {JMP,&main,NOP},
         {JMP,&main,NOP},
         {JMP,&main,NOP},
         {JMP,&main,NOP},
         {JMP,&main,NOP},
         {JMP,&main,NOP},
         {JMP,&main,NOP},
         {JMP,&main,NOP},
         {JMP,&main,NOP},
         {JMP,&main,NOP},
         {JMP,&main,NOP},
         {JMP,&main,NOP},
         {JMP,&main,NOP},
         {JMP,&main,NOP},
         {JMP,&main,NOP},
         {JMP,&main,NOP},
         {JMP,&main,NOP},
         {JMP,&main,NOP},
         {JMP,&main,NOP},
         {JMP,&main,NOP},
         {JMP,&main,NOP},
         {JMP,&main,NOP},
         {JMP,&main,NOP},
         {JMP,&main,NOP},
         {JMP,&main,NOP},
         {JMP,&main,NOP},
         {JMP,&main,NOP},
         {JMP,&main,NOP},
         {JMP,&main,NOP},
         {JMP,&main,NOP},
         {JMP,&main,NOP},
         {JMP,&main,NOP},
         {JMP,&main,NOP},
         {JMP,&main,NOP},
         {JMP,&main,NOP},
         {JMP,&main,NOP},
         {JMP,&main,NOP},
         {JMP,&main,NOP},
         {JMP,&main,NOP},
         {JMP,&main,NOP},
         {JMP,&main,NOP},
         {JMP,&main,NOP},
         {JMP,&main,NOP},
         {JMP,&main,NOP}
};  